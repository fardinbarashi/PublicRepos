
<!-- Frontend Start  -->
<!-- Password Options -->
<div class="gridpasswordaccountoptions">
    <div class="passwordoptions">
        <h2>Password</h2>
        <p class="small-text">Configure password options</p>
        <p></p>
        <!--  Textbox User's new password -->     
        <div class="input-password-wrapper">
            <input @bind-value="UserPassword" @bind-value:event="oninput" type="@PasswordInputType" class="form-control" id="passwordoptionpasswordgenerator" style="max-width: 270px; flex: 1" title="Description: User's new password."><!-- Toggle button, Mask Unmask password in passwordoptionpasswordgenerator  -->
            <button @onclick="TogglePasswordVisibility" type="button" class="btn-toggle-password" title="Toggle Password Visibility">👁</button>
        </div>

        <!--  Generate new password Button -->
        <div class="btn-container-generatepassword">
         <button @onclick="GeneratePassword" type="button" class="btn btn-warning" title="Description: Click here to create new password." id="newpasswordbutton">Generate New Password</button>

        </div>

        <!-- Include Lowercase characters -->
        <div class="form-check">
            <input class="form-check-input" type="checkbox" id="passwordoptionincludelowercasechar" @bind="IncludeLowercaseCharacters">
            <label class="form-check-label" for="passwordoptionincludelowercasechar" title="Include: a,b,c,d">Include lowercase char ( a,b,c,d ...)</label>
        </div>
        <!-- Include Uppercase characters -->
        <div class="form-check">
            <input class="form-check-input" type="checkbox" id="passwordoptionincludeuppercasechar" @bind="IncludeUppercaseCharacters">
            <label class="form-check-label" for="passwordoptionincludeuppercasechar" title="Include: A,B,C,D">Include uppercase char ( A,B,C,D ...)</label>
        </div>
        <!-- Include Numbers characters -->
        <div class="form-check">
            <input class="form-check-input" type="checkbox" id="passwordoptionincludenumbers" @bind="IncludeNumbersCharacters">
            <label class="form-check-label" for="passwordoptionincludenumbers" title="Include: 1,2,3,4">Include numbers char ( 1,2,3,4 ...)</label>
        </div>
        <!-- Include special characters -->
        <div class="form-check">
            <input class="form-check-input" type="checkbox" id="passwordoptionincludespecialchar" @bind="IncludeSpecialCharacters">
            <label class="form-check-label" for="passwordoptionincludespecialchar" title="Include: !,#,?,$">Include special char ( !,#,?,$ ...)</label>
        </div>
        <!-- Exclude similar characters -->
        <div class="form-check">
          <input class="form-check-input" type="checkbox" id="passwordoptionexcludesimilarchar" @bind="ExcludeSimilarCharacters">
          <label class="form-check-label" for="passwordoptionexcludesimilarchar" title="Excluding: I, l, O, 0, Z, 2, S, 5, 8, B, G, 6, Q, 9">Exclude similar char ( I,l,O,0 ...)</label>
        </div>

        <!-- Password Length -->
        <div class="form-group" style="max-width: 285px; display: flex; flex-direction: row; align-items: center;">
             <label for="passwordoptionpasswordLength" style="margin-right: 10px;">Password Length:</label>
            <input type="number" class="form-control" id="passwordoptionpasswordLength" title="Lenght on the new password" min="8" max="128" @bind-value="PasswordLength" style="flex: 1; max-width: 70px">
         </div>     
    </div>

 
<!-- Code Start -->
@code {
// Password Options
    // Mask - Unmask password in the textbox passwordoptionpasswordgenerator
    public string? UserPassword { get; set; } = "";
    private string PasswordInputType => isPasswordVisible ? "text" : "password";
    private bool isPasswordVisible = false;

    private void TogglePasswordVisibility()
    {
        isPasswordVisible = !isPasswordVisible;
    }

    // Generate Password to passwordoptionpasswordgenerator
    public int PasswordLength { get; set; } = 0;
    private bool IncludeLowercaseCharacters = true;
    private bool IncludeUppercaseCharacters = true;
    private bool IncludeNumbersCharacters = true;
    private bool IncludeSpecialCharacters = true;
    private bool ExcludeSimilarCharacters = true;

    
    // Button Generate a New Password
    private void GeneratePassword()
    {
        var passwordLength = PasswordLength;
        const string lowerChars = "abcdefghijklmnopqrstuvwxyz";
        const string upperChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        const string numbers = "0123456789";
        const string specialChars = "!@#$%^&*()_+{}:<>?";
        const string similarChars = "IlO02Z25S58B6G9Q";
        string allowedChars = "";

        // Checkbox values
        if (IncludeLowercaseCharacters)
            allowedChars += lowerChars;

        if (IncludeUppercaseCharacters)
            allowedChars += upperChars;

        if (IncludeNumbersCharacters)
            allowedChars += numbers;

        if (IncludeSpecialCharacters)
            allowedChars += specialChars;

        if (ExcludeSimilarCharacters)
            allowedChars = string.Concat(allowedChars.Where(c => !similarChars.Contains(c)));


        // Create password
        var rng = new Random();
        UserPassword = new string(Enumerable.Repeat(allowedChars, passwordLength)
          .Select(s => s[rng.Next(s.Length)]).ToArray());

        // Show the generated password
        StateHasChanged();

    }
    // Button Generate a New Password EventHandler
    private void OnGeneratePasswordButtonClick()
    {
        GeneratePassword();
    }

}
